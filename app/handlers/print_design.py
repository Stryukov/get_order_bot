from aiogram import Bot, Dispatcher, types
from aiogram.types import InputMediaPhoto
from aiogram.dispatcher.filters import Text, IDFilter
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.config import load_config
from app.handlers.common import cmd_welcome, get_user_info


class OrderPrint(StatesGroup):
    waiting_order = State()
    waiting_phone = State()
    waiting_kind = State()
    waiting_text = State()
    waiting_size = State()
    waiting_info = State()
    waiting_voice = State()


order_kind = {
    "–í–∏–∑–∏—Ç–∫–∞": "–≤–∏–∑–∏—Ç–∫–∏",
    "–õ–∏—Å—Ç–æ–≤–∫–∞": "–ª–∏—Å—Ç–æ–≤–∫–∏",
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç": "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
    "–ê—Ñ–∏—à–∞/–ü–ª–∞–∫–∞—Ç": "–∞—Ñ–∏—à–∏/–ø–ª–∞–∫–∞—Ç–∞",
    "–î—Ä—É–≥–æ–µ": "–ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏"
}


order_data = {
    "text": "",
    "docs": [],
    "photo": [],
    "voice": []
}


config = load_config("config/cfg.ini")
bot = Bot(token=config.bot.token)


async def order_start(message: types.Message, state: FSMContext):
    order_data['text'] = ''
    order_data['docs'] = []
    order_data['photo'] = []
    order_data['voice'] = []
    await OrderPrint.waiting_phone.set()
    await state.update_data(order_name="–î–∏–∑–∞–π–Ω –¥–ª—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏")
    await message.answer('ü§ì –£ –Ω–∞—Å –∫ –≤–∞–º –≤—Å–µ–≥–æ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤! üî∑ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')


async def get_phone(message: types.Message, state: FSMContext):
    await OrderPrint.next()
    await state.update_data(order_phone=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = order_kind.keys()
    keyboard.add(*buttons)
    await message.answer('üî∑ –í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç?', reply_markup=keyboard)


async def get_kind(message: types.Message, state: FSMContext):
    await OrderPrint.next()
    await state.update_data(order_kind=message.text)
    order_kind_dative = order_kind[message.text]
    await message.answer(f'üî∑ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—é–¥–∞ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–π '
                         f'<b>{order_kind_dative} –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</b>. '
                         f'–ï—Å–ª–∏ —É –≤–∞—à–µ–π {order_kind_dative} –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ. \n '
                         f'‚ùóÔ∏è<b>–í–∞–∂–Ω–æ!</b> –ü–æ—Å–ª–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞ –¥–∏–∑–∞–π–Ω–∞, —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—Ä–∞–≤–∫–∞–º. '
                         f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å—Ä–∞–∑—É.', parse_mode=types.ParseMode.HTML)


async def get_text(message: types.Message, state: FSMContext):
    await OrderPrint.next()
    await state.update_data(order_text=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["A6 (10*15 —Å–º)", "A5 (15*20 —Å–º)", "A4 (21*30 —Å–º)", "–ï–≤—Ä–æ—Ñ–æ—Ä–º–∞—Ç (10*21 —Å–º)", "–°–≤–æ–π —Ä–∞–∑–º–µ—Ä"]
    keyboard.add(*buttons)
    await message.answer('üî∑ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç–∞',
                         reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


async def get_size(message: types.Message, state: FSMContext):
    await OrderPrint.next()
    await state.update_data(order_size=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    await message.answer('üî∑ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞!</b> \n '
                         '–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å–ª–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ '
                         '–º–∞–∫–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–ª–æ–≥–æ—Ç–∏–ø—ã, —Ñ–æ—Ç–æ, –∫–∞—Ä—Ç–∏–Ω–∫–∏). \n '
                         '‚ùóÔ∏è<b>–í–∞–∂–Ω–æ!</b> <i>–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.</i>',
                         reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


async def get_info(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        order = await state.get_data()
        order_data['text'] += f'{order["order_text"]}, ' + message.text
        await state.update_data(order_text=order_data['text'])
    if message.content_type == 'document':
        order_data['docs'].append(message.document.file_id)
        await state.update_data(order_docs=order_data['docs'])
    if message.content_type == 'photo':
        order_data['photo'].append(message.photo[0].file_id)
        await state.update_data(order_photo=order_data['photo'])
    if message.content_type == 'sticker':
        await message.answer('–Ø —Ä–æ–±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤. –ú–Ω–µ —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –∫ —á–µ–º—É.')
    if message.content_type == 'voice':
        order_data['voice'].append(message.voice.file_id)
        await state.update_data(order_voice=order_data['voice'])


async def welcome_voice(message: types.Message, state: FSMContext):
    await OrderPrint.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    await message.answer('üî∑ –ï—Å–ª–∏ –≤–∞—Å –µ—Å—Ç—å <b>–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</b> –∏ –Ω—é–∞–Ω—Å—ã, —Ç–æ '
                         '<b>–Ω–∞–≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∞–º –∏—Ö —Å—é–¥–∞ –≤ –≤–∏–¥–µ –∞—É–¥–∏–æ</b>, '
                         '–Ω–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ –≤–∞—Å —É—Å–ª—ã—à–∞—Ç—å.üå∏ '
                         '–ü–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"'
                         , reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


async def get_voice(message: types.Message, state: FSMContext):
    if message.content_type == 'voice':
        order_data['voice'].append(message.voice.file_id)
        await state.update_data(order_voice=order_data['voice'])
    else:
        await message.answer('üî∑ –ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É".')


async def order_finish(message: types.Message, state: FSMContext):
    order = await state.get_data()
    user = get_user_info(message)
    await bot.send_message(config.bot.admin_group, f'üî∑ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b> '
                                                   f'\n–ö–ª–∏–µ–Ω—Ç: {user.fullname} (@{user.uname}) \n'
                                                   f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {order["order_phone"]}'
                                                   f'\n{order["order_name"]}: '
                                                   f'{order["order_kind"]} / {order["order_size"]}'
                                                   f'\n–¢–µ–∫—Å—Ç –º–∞–∫–µ—Ç–∞: {order["order_text"]}',
                           parse_mode=types.ParseMode.HTML)
    if "order_docs" in order.keys():
        if order["order_docs"]:
            for doc in order['order_docs']:
                await bot.send_document(config.bot.admin_group, doc)
    if "order_photo" in order.keys():
        if order["order_photo"]:
            if len(order['order_photo']) > 1:
                media = []
                for photo in order['order_photo']:
                    media.append(InputMediaPhoto(photo))
                await bot.send_media_group(config.bot.admin_group, media)
            else:
                await bot.send_photo(config.bot.admin_group, order['order_photo'][0])
    if "order_voice" in order.keys():
        if order["order_voice"]:
            for voice in order['order_voice']:
                await bot.send_voice(config.bot.admin_group, voice)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã –æ—Ç–Ω–µ—Å–µ–º—Å—è –∫ –Ω–µ–º—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ!')
    await state.finish()
    await cmd_welcome(message)


def register_handlers_print_design(dp: Dispatcher):
    dp.register_message_handler(order_start, Text(equals="–î–∏–∑–∞–π–Ω –¥–ª—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏"), state="*")
    dp.register_message_handler(get_phone, state=OrderPrint.waiting_phone)
    dp.register_message_handler(get_kind, state=OrderPrint.waiting_kind)
    dp.register_message_handler(get_text, state=OrderPrint.waiting_text)
    dp.register_message_handler(get_size, state=OrderPrint.waiting_size)
    dp.register_message_handler(welcome_voice, Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"), state=OrderPrint.waiting_info)
    dp.register_message_handler(get_info, state=OrderPrint.waiting_info, content_types=types.ContentTypes.ANY)
    dp.register_message_handler(order_finish, Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), state=OrderPrint.waiting_voice)
    dp.register_message_handler(get_voice, state=OrderPrint.waiting_voice, content_types=types.ContentTypes.ANY)
