from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text, IDFilter
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.config import load_config
from app.handlers.common import cmd_welcome, get_user_info


class OrderCopy(StatesGroup):
    waiting_order = State()
    waiting_phone = State()
    waiting_kind = State()
    waiting_text = State()
    waiting_size = State()
    waiting_voice = State()


order_data = {
    "text": "",
    "voice": []
}


config = load_config("config/cfg.ini")
bot = Bot(token=config.bot.token)


async def order_start(message: types.Message, state: FSMContext):
    order_data['text'] = ''
    order_data['docs'] = []
    order_data['photo'] = []
    order_data['voice'] = []
    await OrderCopy.waiting_phone.set()
    await state.update_data(order_name="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤")
    await message.answer('ü§ì –£ –Ω–∞—Å –∫ –≤–∞–º –≤—Å–µ–≥–æ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤! üî∑ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')


async def get_phone(message: types.Message, state: FSMContext):
    await OrderCopy.next()
    await state.update_data(order_phone=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–ü–æ—Å—Ç –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö', '–†–∞—Å—Å—ã–ª–∫–∞', '–î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π', '–°–∞–π—Ç (seo —Å—Ç–∞—Ç—å—è)']
    keyboard.add(*buttons)
    await message.answer('üî∑ –í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –≤–∞–º –Ω—É–∂–Ω—ã —Ç–µ–∫—Å—Ç—ã?', reply_markup=keyboard)


async def get_kind(message: types.Message, state: FSMContext):
    await OrderCopy.next()
    await state.update_data(order_kind=message.text)
    await message.answer(f'üî∑ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—é–¥–∞ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —Ç–µ–∑–∏—Å—ã –∫ —Ç–µ–∫—Å—Ç—É. \n'
                         f'‚ùóÔ∏è<b>–í–∞–∂–Ω–æ!</b> –ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. '
                         f'–ê—É–¥–∏–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª–µ–µ.', parse_mode=types.ParseMode.HTML)


async def get_text(message: types.Message, state: FSMContext):
    await OrderCopy.next()
    await state.update_data(order_text=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ö–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 1000)", "¬´–ö–∞–∫ –ø–æ—Å—Ç¬ª (1000-1500)", "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (2500)", "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"]
    keyboard.add(*buttons)
    await message.answer('üî∑ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–∫–∞–∑–∞–Ω–æ –≤ —Å–∏–º–≤–æ–ª–∞—Ö).',
                         reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


async def get_size(message: types.Message, state: FSMContext):
    await OrderCopy.next()
    await state.update_data(order_size=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    await message.answer('üî∑ –ï—Å–ª–∏ –≤–∞—Å –µ—Å—Ç—å <b>–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</b> –∏ –Ω—é–∞–Ω—Å—ã, —Ç–æ '
                         '<b>–Ω–∞–≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∞–º –∏—Ö —Å—é–¥–∞ –≤ –≤–∏–¥–µ –∞—É–¥–∏–æ</b>, '
                         '–Ω–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ –≤–∞—Å —É—Å–ª—ã—à–∞—Ç—å.üå∏ '
                         '–ü–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"'
                         , reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


async def get_voice(message: types.Message, state: FSMContext):
    if message.content_type == 'voice':
        order_data['voice'].append(message.voice.file_id)
        await state.update_data(order_voice=order_data['voice'])
    else:
        await message.answer('üî∑ –ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É".')


async def order_finish(message: types.Message, state: FSMContext):
    order = await state.get_data()
    user = get_user_info(message)
    await bot.send_message(config.bot.admin_group, f'üî∑ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b> '
                                                   f'\n–ö–ª–∏–µ–Ω—Ç: {user.fullname} (@{user.uname}) \n'
                                                   f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {order["order_phone"]}'
                                                   f'\n{order["order_name"]}: '
                                                   f'{order["order_kind"]} / {order["order_size"]}'
                                                   f'\n–¢–µ–∑–∏—Å—ã: {order["order_text"]}',
                           parse_mode=types.ParseMode.HTML)
    if "order_voice" in order.keys():
        if order["order_voice"]:
            for voice in order['order_voice']:
                await bot.send_voice(config.bot.admin_group, voice)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã –æ—Ç–Ω–µ—Å–µ–º—Å—è –∫ –Ω–µ–º—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ!')
    await state.finish()
    await cmd_welcome(message)


def register_handlers_copywriting(dp: Dispatcher):
    dp.register_message_handler(order_start, Text(equals="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤"), state="*")
    dp.register_message_handler(get_phone, state=OrderCopy.waiting_phone)
    dp.register_message_handler(get_kind, state=OrderCopy.waiting_kind)
    dp.register_message_handler(get_text, state=OrderCopy.waiting_text)
    dp.register_message_handler(get_size, state=OrderCopy.waiting_size)
    dp.register_message_handler(order_finish, Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), state=OrderCopy.waiting_voice)
    dp.register_message_handler(get_voice, state=OrderCopy.waiting_voice, content_types=types.ContentTypes.ANY)
